import random


class TTT:

    def __init__(self, beats):
        self.beats = beats

    def play(self):
        plays = input("Do you want to play")
    def chose_player1(self):  # makes player 1's marker p1
        self.p1 = input("Player 1 do you d ant to be X or O")
        if self.p1.upper() == 'X':
            return "Player 1 is 'X'"
        else:
            return "Player 1 is 'O'"

    def chose_player2(self):  # makes player 2's marker p2
        if self.p1 == "X":
            self.p2 = 'O'
            return ("'Player 2 is 'O'")
        else:
            self.p2 = "X"
            return ("'Player 2 is 'X'")

    def make_movep1(self):  # takes where the marker will be put for p1
        self.move1 = int(input('Where would you like to put your piece player1 (1-9):'))

    def make_movep2(self):  # takes where the marker will be put for p1
        self.move2 = int(input('Where would you like to put your piece player1 (1-9):'))

    def whosturn(self):
        if random.randint(0, 1) == 0:
            return "Player 1"
        else:
            return "Player 2"

    def make_board(self):
        # while " " in board:
        self.board = [" "] * 10
        print('   |   |')
        print(' ' + self.board[7] + ' | ' + self.board[8] + ' | ' + self.board[9])
        print('   |   |')
        print('-----------')
        print('   |   |')
        print(' ' + self.board[4] + ' | ' + self.board[5] + ' | ' + self.board[6])
        print('   |   |')
        print('-----------')
        print('   |   |')
        print(' ' + self.board[1] + ' | ' + self.board[2] + ' | ' + self.board[3])
        print('   |   |')

    def place_markerp1(self):
        self.board[self.move1] = self.p1

    def place_markerp2(self):
        self.board[self.move2] = self.p2

    def win_checkerp1(self):
        return ((self.board[7] == self.p1 and self.board[8] == self.p1 and self.board[
            9] == self.p1) or  # across the top
                (self.board[4] == self.p1 and self.board[5] == self.p1 and self.board[
                    6] == self.p1) or  # across the middle
                (self.board[1] == self.p1 and self.board[2] == self.p1 and self.board[
                    3] == self.p1) or  # across the bottom
                (self.board[7] == self.p1 and self.board[4] == self.p1 and self.board[
                    1] == self.p1) or  # down the middle
                (self.board[8] == self.p1 and self.board[5] == self.p1 and self.board[
                    2] == self.p1) or  # down the middle
                (self.board[9] == self.p1 and self.board[6] == self.p1 and self.board[
                    3] == self.p1) or  # down the right side
                (self.board[7] == self.p1 and self.board[5] == self.p1 and self.board[3] == self.p1) or  # diagonal
                (self.board[9] == self.p1 and self.board[5] == self.p1 and self.board[1] == self.p1))  # diagonal

    def win_checker2(self):
        return ((self.board[7] == self.p2 and self.board[8] == self.p2 and self.board[
            9] == self.p2) or  # across the top
                (self.board[4] == self.p2 and self.board[5] == self.p2 and self.board[
                    6] == self.p2) or  # across the middle
                (self.board[1] == self.p2 and self.board[2] == self.p2 and self.board[
                    3] == self.p2) or  # across the bottom
                (self.board[7] == self.p2 and self.board[4] == self.p2 and self.board[
                    1] == self.p2) or  # down the middle
                (self.board[8] == self.p2 and self.board[5] == self.p2 and self.board[
                    2] == self.p2) or  # down the middle
                (self.board[9] == self.p2 and self.board[6] == self.p2 and self.board[
                    3] == self.p2) or  # down the right side
                (self.board[7] == self.p2 and self.board[5] == self.p2 and self.board[3] == self.p2) or  # diagonal
                (self.board[9] == self.p2 and self.board[5] == self.p2 and self.board[1] == self.p2))  # diagonal

    if __name__ == '__main__':
        # p1 = input("Player 1 do you d ant to be X or O")
        print('Welcome to Tic Tac Toe')

        while True:
            chose_player1()
            chose_player2()
            turn = whosturn()
            print(chose_player1.p1 + 'will start')

            if play.plays.lower()[0] == 'y':
                playing = True
            else:
                playing = False
            while playing:
                if turn == "Player 1":
                    make_board()
                    make_movep1()
                    place_markerp1()
                    if win_checkerp1():
                        make_board()
                        print('Player 1 is the winner')
                        playing = False
                    else:
                        pass
                else:
                    make_board()
                    make_movep2()
                    place_markerp2()
                    if win_checker2():
                        print("Player 2 wins")
                        playing = False
                    else:
                        pass

# only printing the first print statement
